{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daulay\\\\Desktop\\\\react-recipe\\\\src\\\\pages\\\\dashboard\\\\form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './style.scss';\nimport { Button, FormGroup, Input, Label } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FormDashboard(_ref) {\n  _s();\n\n  let {\n    actionForm,\n    data,\n    setData,\n    setModalVisible,\n    updatedId\n  } = _ref;\n  const initialFormValue = {\n    name: \"\",\n    price: 0,\n    stock: 0,\n    category: \"\",\n    photo_url: \"\"\n  };\n  const [form, setForm] = useState(initialFormValue);\n\n  const createData = async () => {\n    await axios.post('http://localhost:8080/products', form).then(res => {\n      data.push(form);\n    }).catch(err => console.error(err));\n    setModalVisible(false);\n  };\n\n  const updateData = async () => {\n    await axios.put(`http://localhost:8080/products/${updatedId}`, form).then(() => {\n      const updateDataIndex = data.findIndex(p => p.id === updatedId);\n      data[updateDataIndex] = form;\n    }).catch(err => console.error(err));\n    setModalVisible(false);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (actionForm === \"create\") return createData();\n    return updateData();\n  };\n\n  useEffect(() => {\n    if (actionForm === \"edit\") {\n      const editedData = Object.assign({}, data.find(v => v.id === updatedId));\n      delete editedData.id;\n      setForm(editedData);\n    }\n  }, [data, updatedId, actionForm]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [Object.keys(form).map((key, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            children: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            value: form[key],\n            onChange: e => setForm(prev => ({ ...prev,\n              [key]: e.target.value\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col upload-button\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://postimages.org/\",\n          target: \"_blank\",\n          children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faCloudUploadAlt\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 73\n          }, this), \"Upload here\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"cancel-button\",\n        onClick: () => setModalVisible(false),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FormDashboard, \"ZXLN3W9TH7oTULiAf77pYGx/kz4=\");\n\n_c = FormDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDashboard\");","map":{"version":3,"sources":["C:/Users/Daulay/Desktop/react-recipe/src/pages/dashboard/form.jsx"],"names":["React","useEffect","useState","axios","Button","FormGroup","Input","Label","FontAwesomeIcon","faCloudUploadAlt","FormDashboard","actionForm","data","setData","setModalVisible","updatedId","initialFormValue","name","price","stock","category","photo_url","form","setForm","createData","post","then","res","push","catch","err","console","error","updateData","put","updateDataIndex","findIndex","p","id","handleSubmit","e","preventDefault","editedData","Object","assign","find","v","keys","map","key","idx","prev","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport './style.scss'\r\nimport { Button, FormGroup, Input, Label } from \"reactstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCloudUploadAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport default function FormDashboard({actionForm, data, setData, setModalVisible, updatedId}) {\r\n    const initialFormValue = {\r\n        name: \"\",\r\n        price: 0,\r\n        stock: 0,\r\n        category: \"\",\r\n        photo_url: \"\"\r\n    };\r\n    const [form, setForm] = useState(initialFormValue);\r\n    const createData = async () => {\r\n        await axios.post('http://localhost:8080/products', form)\r\n            .then((res) => {\r\n                data.push(form)\r\n            })\r\n            .catch((err) => console.error(err));\r\n        setModalVisible(false)\r\n    };\r\n    const updateData = async () => {\r\n        await axios.put(`http://localhost:8080/products/${updatedId}`, form)\r\n            .then(() => {\r\n                const updateDataIndex = data.findIndex((p) => p.id === updatedId);\r\n                data[updateDataIndex] = form;\r\n            })\r\n            .catch((err) => console.error(err));\r\n        setModalVisible(false)\r\n    };\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (actionForm === \"create\") return createData();\r\n        return updateData();\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (actionForm === \"edit\") {\r\n            const editedData = Object.assign({}, data.find(v => v.id === updatedId));\r\n            delete editedData.id;\r\n            setForm(editedData);\r\n        }\r\n    }, [data, updatedId, actionForm]);\r\n    return(\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                {Object.keys(form).map((key,idx) => (\r\n                    <div key={idx}>\r\n                        <FormGroup>\r\n                            <Label>\r\n                                {key}\r\n                            </Label>\r\n                            <Input\r\n                            value={form[key]}\r\n                            onChange={(e) => setForm((prev) => ({\r\n                                ...prev,\r\n                                [key]: e.target.value\r\n                            }))}/>\r\n                        </FormGroup>\r\n                    </div>\r\n                ))}\r\n                <div className=\"col upload-button\">\r\n                    <a href=\"https://postimages.org/\" target={\"_blank\"}><FontAwesomeIcon icon={faCloudUploadAlt}/>Upload here</a>\r\n                </div>\r\n                <br/>\r\n                <Button color=\"primary\" type=\"submit\">Submit</Button>\r\n                <Button className=\"cancel-button\" onClick={() => setModalVisible(false)}>Cancel</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}